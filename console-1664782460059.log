function doWork(num){
    var promise = new Promise((resolve, reject)=>{
             // Async Code
        setTimeout(()=>{
            if(num>10){
                reject("Can't Compute Cube >10");
                
            }
            resolve(num**3);
        }, 5000);
    });
    return promise;
   
}
undefined
var pr = doWork(3);
undefined
pr;
Promise {<pending>}
pr;
Promise {<fulfilled>: 27}
var pr = doWork(30);
undefined
VM610:6 Uncaught (in promise) Can't Compute Cube >10
(anonymous) @ VM610:6
setTimeout (async)
(anonymous) @ VM610:4
doWork @ VM610:2
(anonymous) @ VM695:1
pr;
Promise {<rejected>: "Can't Compute Cube >10"}
var pr = doWork(30);
undefined
pr;
Promise {<pending>}
VM610:6 Uncaught (in promise) Can't Compute Cube >10
(anonymous) @ VM610:6
setTimeout (async)
(anonymous) @ VM610:4
doWork @ VM610:2
(anonymous) @ VM715:1
pr;
Promise {<rejected>: "Can't Compute Cube >10"}
var pr = doWork(30);
pr.then(data=>console.log('Data ',data)) // Resolve
    .catch(err=>console.log('Error ',err)); // Reject
Promise {<pending>}
VM1195:3 Error  Can't Compute Cube >10
var pr = doWork(5);
pr.then(data=>console.log('Data ',data)) // Resolve
    .catch(err=>console.log('Error ',err)); // Reject
Promise {<pending>}
VM1212:2 Data  125
var singlePromise = Promise.all([doWork(2), doWork(3), doWork(5)]);
singlePromise.then(results=>console.log(results)).catch(err=>console.log(err));

Promise {<pending>}
VM1743:2 (3) [8, 27, 125]
var singlePromise = Promise.all([doWork(2), doWork(300), doWork(5)]);
singlePromise.then(results=>console.log(results)).catch(err=>console.log(err));

Promise {<pending>}
VM1758:2 Can't Compute Cube >10
var singlePromise = Promise.all([doWork(2), doWork(300), doWork(500)]);
singlePromise.then(results=>console.log(results)).catch(err=>console.log(err));

Promise {<pending>}
VM1772:2 Can't Compute Cube >10
function doWork(num){
    var promise = new Promise((resolve, reject)=>{
             // Async Code
        setTimeout(()=>{
            if(num>10){
                reject("Can't Compute Cube >10 and Ur Value is "+Number);
                
            }
            resolve(num**3);
        }, 5000);
    });
    return promise;
   
}
undefined
function doWork(num){
    var promise = new Promise((resolve, reject)=>{
             // Async Code
        setTimeout(()=>{
            if(num>10){
                reject("Can't Compute Cube >10 and Ur Value is "+num);
                
            }
            resolve(num**3);
        }, 5000);
    });
    return promise;
   
}
undefined
var singlePromise = Promise.all([doWork(2), doWork(300), doWork(500)]);
singlePromise.then(results=>console.log(results)).catch(err=>console.log(err));

Promise {<pending>}
VM1898:2 Can't Compute Cube >10 and Ur Value is 300
var singlePromise = Promise.allSettled([doWork(2), doWork(300), doWork(500)]);
singlePromise.then(results=>console.log(results)).catch(err=>console.log(err));

Promise {<pending>}
VM1941:2 (3) [{…}, {…}, {…}]0: {status: 'fulfilled', value: 8}1: reason: "Can't Compute Cube >10 and Ur Value is 300"status: "rejected"[[Prototype]]: Object2: reason: "Can't Compute Cube >10 and Ur Value is 500"status: "rejected"[[Prototype]]: Objectlength: 3[[Prototype]]: Array(0)
var singlePromise = Promise.race([doWork(2), doWork(300), doWork(500)]);
singlePromise.then(results=>console.log(results)).catch(err=>console.log(err));

Promise {<pending>}
VM1989:2 8
function doWork(num, time){
    var promise = new Promise((resolve, reject)=>{
             // Async Code
        setTimeout(()=>{
            if(num>10){
                reject("Can't Compute Cube >10 and Ur Value is "+num);
                
            }
            resolve(num**3);
        }, time);
    });
    return promise;
   
}
undefined
var singlePromise = Promise.race([doWork(2, 5000), doWork(300,1000), doWork(500,7000)]);
singlePromise.then(results=>console.log(results)).catch(err=>console.log(err));

Promise {<pending>}
VM2109:2 Can't Compute Cube >10 and Ur Value is 300
var singlePromise = Promise.race([doWork(2, 5000), doWork(3,1000), doWork(500,7000)]);
singlePromise.then(results=>console.log(results)).catch(err=>console.log(err));

Promise {<pending>}
VM2120:2 27
var singlePromise = Promise.any([doWork(26, 2000), doWork(300,1000), doWork(5,7000)]);
singlePromise.then(results=>console.log(results)).catch(err=>console.log(err));

Promise {<pending>}
VM2203:2 125
var singlePromise = Promise.any([doWork(2, 2000), doWork(300,1000), doWork(5,7000)]);
singlePromise.then(results=>console.log(results)).catch(err=>console.log(err));

Promise {<pending>}
VM2222:2 8
function payment(){
    var pr = new Promise((res, rej)=>{
        setTimeout(()=>{
            res(true);
        }
    });
    return pr;
}
VM2528:5 Uncaught SyntaxError: missing ) after argument list
function payment(){
    var pr = new Promise((res, rej)=>{
        setTimeout(()=>{
            res(true);
        },5000)
    });
    return pr;
}
undefined
function delInfo(){
    var pr = new Promise((res, rej)=>{
        setTimeout(()=>{
            res("Del Info is ");
        },5000)
    });
    return pr;
}
undefined
function tracking(){
    var pr = new Promise((res, rej)=>{
        setTimeout(()=>{
            res("Tracking Info is ");
        },6000)
    });
    return pr;
}
undefined
var pr = payment();
pr.then(data=>{
    if(data){
        var p = delInfo();
        console.log('Payment Success ');
        p.then(result=>{
            console.log(result);
            var p2 = tracking();
            p2.then(r=>{
                console.log(r);
            }
        });
    }
}.catch(e=>console.log(e));
VM3472:11 Uncaught SyntaxError: missing ) after argument list
var pr = payment();
pr.then(data=>{
    if(data){
        var p = delInfo();
        console.log('Payment Success ');
        p.then(result=>{
            console.log(result);
            var p2 = tracking();
            p2.then(r=>{
                console.log(r);
            })
        });
    }
}).catch(e=>console.log(e));
Promise {<pending>}
VM3491:5 Payment Success 
VM3491:7 Del Info is 
VM3491:10 Tracking Info is 
function orderProcess(){
    try{
    let isPaymentDone = await payment(); // wait till get the result or error
     await delInfo(); 
     await tracking();   
    }
    catch(err){
        console.log(err);
    }
}
VM4010:3 Uncaught SyntaxError: await is only valid in async functions and the top level bodies of modules
async function orderProcess(){
    try{
    let isPaymentDone = await payment(); // wait till get the result or error
     await delInfo(); 
     await tracking();   
    }
    catch(err){
        console.log(err);
    }
}
undefined
var p = orderProcess();
undefined
p;
Promise {<pending>}
async function orderProcess(){
    try{
    const isPaymentDone = await payment(); // wait till get the result or error
        console.log("Payment Done "+isPaymentDone);
     const t = await delInfo(); 
        console.log(t);
     const y = await tracking();  
        console.log(y);
    }
    catch(err){
        console.log(err);
    }
}
undefined
var p = orderProcess();
undefined
p;
Promise {<pending>}
VM4473:4 Payment Done true
VM4473:6 Del Info is 
VM4473:8 Tracking Info is 
p;
Promise {<fulfilled>: undefined}
function cube(num, time){
    var pr = new Promise((res, rej)=>{
    setTimeout(()=>{
        res(num**3);
    },time);
               });
    return pr;
}
undefined
async function total(){
    let sum = await cube(3, 1000) + await cube(5, 5000) + await cube(8,8000);
    console.log(sum);
    return sum; // Wrap Inside the Promise
}
undefined
var g = total();
undefined
g;
Promise {<pending>}
VM5241:3 664
g.then(r=>console.log(r));
VM5397:1 664
Promise {<fulfilled>: undefined}
function cube(num, time){
    console.log('Cube Start ',num);
    var pr = new Promise((res, rej)=>{
    setTimeout(()=>{
        res(num**3);
    },time);
               });
    return pr;
}
undefined
var g = total();
g.then(r=>console.log(r)).catch(err=>console.log(err));
VM5531:2 Cube Start  3
Promise {<pending>}
VM5531:2 Cube Start  5
VM5531:2 Cube Start  8
VM5241:3 664
VM5776:2 664
